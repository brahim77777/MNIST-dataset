# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sHrSpdMThqVymeFYMhuoVbUZd1JTpy7n
"""

from keras.datasets import mnist
import numpy as np
import sys

(x_train, y_train), (x_test, y_test) = mnist.load_data()



images = x_train[0:1000].reshape(1000, 28*28)/255

labels = y_train[0:1000]

one_hot_labels = np.zeros((len(labels), 10))
for i , l in enumerate(labels):
  one_hot_labels[i][l] = 1

labels = one_hot_labels

alpha = 0.005
hidden_size = 40
pixels_per_image = 784
num_labels = 10

np.random.seed(1)
weights_0_1 = 0.2*np.random.random((pixels_per_image, hidden_size)) - 0.1
weights_1_2 = 0.2*np.random.random((hidden_size, num_labels)) - 0.1

relu = lambda x:(x>=0)*x
relu2deriv = lambda x:(x>=0)

for iteration in range(350):
  error = 0.0
  correct_count = 0
  for i in range(len(images)):
    layer_0_values = images[i:i+1] # (1,784)
    layer_1_values = np.dot(layer_0_values , weights_0_1) # (1,784)*(784,40) -> (1,40)
    layer_1_values = relu(layer_1_values)
    layer_2_values = np.dot(layer_1_values, weights_1_2) # (1,40)*(40,10) -> (1,10) percentage ?
    error += np.sum( (labels[i:i+1] - layer_2_values)**2 )
    # correct = check if the max index in the predicted values is hte same as the label
    correct_count += int(np.argmax(layer_2_values) == np.argmax(labels[i:i+1]))

    layer_2_delta = labels[i:i+1] - layer_2_values # (1,10)
    layer_1_delta = np.dot( layer_2_delta ,weights_1_2.T )*relu2deriv(layer_1_values) # (1,10)*(10,40) -> (1,40)

    weights_0_1 += alpha*( np.dot(layer_0_values.T, layer_1_delta) ) # (784,1) * (1,40) -> (784, 40)
    weights_1_2 += alpha*( np.dot(layer_1_values.T, layer_2_delta) ) # (40,1) * (1,10) -> (40*10)
  # sys.stdout.write("\r"+ \
  #                  " I: "+str(iteration)+\
  #                  " Error: "+str(error/float(len(images)))[0:5] +\
  #                  " Correct: "+ str(correct_count/float (len(images))))
  print("I: ", iteration, ", Error: ", (str(error/float(len(images)))[0:5]), ", Correct: ", correct_count)
